package com.webbanmatkinh.controller.web;

import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.webbanmatkinh.converter.UserConverter;
import com.webbanmatkinh.dto.ProductCartDTO;
import com.webbanmatkinh.dto.UserDTO;
import com.webbanmatkinh.entity.UserEntity;
import com.webbanmatkinh.repository.UserRepository;
import com.webbanmatkinh.service.ICartService;
import com.webbanmatkinh.service.IProductCartService;
import com.webbanmatkinh.service.IProductService;
import com.webbanmatkinh.service.ISliderService;
import com.webbanmatkinh.service.IUserService;
import com.webbanmatkinh.util.SecurityUtils;

@Controller(value = "homeControllerOfWeb")
public class HomeController {

	@Autowired
	private ISliderService sliderService;

	@Autowired
	private IProductService productService;

	@Autowired
	private IUserService userService;

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private UserConverter userConverter;

	@Autowired
	private ICartService cartService;

	@Autowired
	private IProductCartService productCartService;

	@RequestMapping(value = "/gio-hang", method = RequestMethod.GET)
	public ModelAndView cartPage(HttpSession session) {
		ModelAndView mav = new ModelAndView("web/cart");
		
		Long userId = userService.getUserIdByUsername(SecurityUtils.getPrincipal().getUsername());
		Long cartId = cartService.getCartIdByUserId(userId);
		
		session.setAttribute("cartId", cartId);
		session.setAttribute("userId", userId);

		session.setAttribute("totalQuantityCart", productCartService.totalQuantity(cartId));
		session.setAttribute("totalPriceCart", productCartService.totalPrice(cartId));

		HashMap<Long, ProductCartDTO> cart = (HashMap<Long, ProductCartDTO>) session.getAttribute("Cart");

		if (cart == null) {
			cart = new HashMap<Long, ProductCartDTO>();
		}
		cart = productCartService.getCart(cartId);
		session.setAttribute("Cart", cart);
		return mav;
	}

	//? khong hien thi so san pham cua gio hang
	@RequestMapping(value = "/trang-chu", method = RequestMethod.GET)
	public ModelAndView homePage() {
		
		ModelAndView mav = new ModelAndView("web/home");
		mav.addObject("sliders", sliderService.findAll());

		mav.addObject("products", productService.findNewProducts());
		mav.addObject("quantityProduct", productService.getTotalNewProduct());

		mav.addObject("hotproducts", productService.findHotProducts());
		mav.addObject("quantityHotProduct", productService.getTotalHotProduct());
		
		return mav;
	}

	@RequestMapping(value = "/dang-nhap", method = RequestMethod.GET)
	public ModelAndView loginPage() {
		ModelAndView mav = new ModelAndView("login2");
		return mav;
	}

	@RequestMapping(value = "/dat-hang", method = RequestMethod.GET)
	public ModelAndView checkOutPage(ModelMap model) {
		ModelAndView mav = new ModelAndView("web/checkout");
		UserDTO user = new UserDTO();
		Long userId = userService.getUserIdByUsername(SecurityUtils.getPrincipal().getUsername());
		UserEntity entity = userRepository.findOne(userId);
		user = userConverter.toDto(entity);
		mav.addObject("user", user);
		return mav;
	}

	@RequestMapping(value = "/contact", method = RequestMethod.GET)
	public ModelAndView contact() {
		ModelAndView mav = new ModelAndView("web/contact");
		return mav;
	}

	@RequestMapping(value = "/thoat", method = RequestMethod.GET)
	public ModelAndView logout(HttpServletRequest request, HttpServletResponse response) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null) {
			new SecurityContextLogoutHandler().logout(request, response, auth);
		}
		return new ModelAndView("redirect:/trang-chu");
	}

	@RequestMapping(value = "/accessDenied", method = RequestMethod.GET)
	public ModelAndView accessDenied() {
		return new ModelAndView("redirect:/dang-nhap?accessDenied");
	}
}
