package com.webbanmatkinh.controller.web;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;

import com.webbanmatkinh.entity.ProductEntity;
import com.webbanmatkinh.service.*;

@Controller(value = "productControllerOfWeb")
@RequestMapping(value = "/san-pham/")
public class ProductController {

	@Autowired
	private ICategoryService categoryService;

	@Autowired
	private IProductService productService;
	
	/*@RequestMapping(value = "{categoryCode}", method = RequestMethod.GET)
	public ModelAndView showProduct(
			@PathVariable(value = "categoryCode", required = false) String categoryCode, 
			@RequestParam("page") int page,
			HttpServletRequest request, 
			@RequestParam("limit") int limit) {
		ModelAndView mav = new ModelAndView("web/shop");
		mav.addObject("categories", categoryService.findAll());
		ProductDTO model = new ProductDTO();
		model.setPage(page);
		model.setLimit(limit);
		Pageable pageable = new PageRequest(page - 1, limit);
		if (categoryCode.contains("danh-sach")) {
			model.setListResult(productService.findAll(pageable));
			model.setTotalItem(productService.getTotalItem());
		} else if (categoryCode.contains("hot-products")) {
			model.setListResult(productService.findAllByHotproduct(pageable, SystemConstant.HOT_PRODUCT));
			model.setTotalItem(productService.countByHotproduct(SystemConstant.HOT_PRODUCT));
		} else if (categoryCode.contains("new-products")) {
			model.setListResult(productService.findAllByNewproduct(pageable, SystemConstant.NEW_PRODUCT));
			model.setTotalItem(productService.countByNewproduct(SystemConstant.NEW_PRODUCT));
		} else {
			Long id = categoryService.findOneByCode(categoryCode).getId();
			model.setListResult(productService.findAllByCategory(pageable, id));
			model.setTotalItem(productService.countByCategory_id(id));
		}
		model.setTotalPage((int) Math.ceil((double) model.getTotalItem() / model.getLimit()));
		mav.addObject("products", model);
		return mav;
	}*/

	/*@RequestMapping(value = "danh-sach", method = RequestMethod.GET)
	public String showProduct(@RequestParam(value = "name" , required = false) String name,
			ModelMap model) {
		List<ProductEntity> list = null;
		if(StringUtils.hasText(name)) {
			list = productService.findByNameContaining(name);
			model.addAttribute("products", list);
		}else {
			model.addAttribute("products", productService.findAll());
		}
		model.addAttribute("categories", categoryService.findAll());
		return "web/shop";
	}*/
	@RequestMapping(value = "danh-sach", method = RequestMethod.GET)
	public String showProduct(@RequestParam(value = "name" , required = false) String name,
			ModelMap model,
			@RequestParam("page") Optional<Integer> page,
			@RequestParam("size") Optional<Integer> size
			) {
		int currentPage = page.orElse(1);
		int pageSize = size.orElse(5);
		Pageable pageable = PageRequest.of(currentPage,pageSize);
		
		Page<ProductEntity> list = null;
		if(StringUtils.hasText(name)) {
			list = productService.findByNameContaining(name);
			model.addAttribute("products", list);
		}else {
			model.addAttribute("products", productService.findAll());
		}
		model.addAttribute("categories", categoryService.findAll());
		return "web/shop";
	}
}
