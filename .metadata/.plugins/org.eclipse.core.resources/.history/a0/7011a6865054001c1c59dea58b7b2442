package com.webbanmatkinh.controller.web;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.webbanmatkinh.dto.ProductDTO;
import com.webbanmatkinh.service.ICategoryService;
import com.webbanmatkinh.service.IProductService;

@Controller(value = "findControllerOfWeb")
public class FindController {

	@Autowired
	private IProductService productService;

	@Autowired
	private ICategoryService categoryService;
	
	@RequestMapping(value = "/tim-kiem", method = RequestMethod.GET)
	public ModelAndView showProduct(
			@RequestParam(name = "name" , required = false) String name,
			@RequestParam("page") int page, 
			HttpServletRequest request, 
			@RequestParam("limit") int limit) {
		ModelAndView mav = new ModelAndView("web/shop");
		ProductDTO model = new ProductDTO();
		model.setPage(page);
		model.setLimit(limit); 
		Pageable pageable = new PageRequest(page - 1, limit);
		
		if(StringUtils.hasText(name)) {
			model.setListResult(productService.findAllByNameLike(pageable, name));
			model.setTotalItem(productService.countByNameLike(name));
		}
		else {
			model.setListResult(productService.findAll(pageable));
			model.setTotalItem(productService.getTotalItem());
		}
		model.setTotalPage((int) Math.ceil((double) model.getTotalItem() / model.getLimit()));
		mav.addObject("products", model);
		mav.addObject("categories", categoryService.findAll());
		return mav;
	}
	
	@RequestMapping( method = RequestMethod.POST)
	public String resetPassword2(HttpServletRequest request) {
		String name = request.getParameter("name");
		return "redirect:/tim-kiem";
	}
}
