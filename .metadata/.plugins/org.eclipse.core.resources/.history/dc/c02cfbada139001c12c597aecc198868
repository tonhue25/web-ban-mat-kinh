package com.webbanmatkinh.controller.web;

import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.webbanmatkinh.constant.SystemConstant;
import com.webbanmatkinh.converter.UserConverter;
import com.webbanmatkinh.dto.BillDTO;
import com.webbanmatkinh.dto.ProductCartDTO;
import com.webbanmatkinh.dto.ProductDTO;
import com.webbanmatkinh.dto.UserDTO;
import com.webbanmatkinh.entity.UserEntity;
import com.webbanmatkinh.repository.UserRepository;
import com.webbanmatkinh.service.IBillService;
import com.webbanmatkinh.service.ICartService;
import com.webbanmatkinh.service.IProductCartService;
import com.webbanmatkinh.service.IUserService;
import com.webbanmatkinh.util.SecurityUtils;

@Controller(value = "billController")
public class BillController {
	@Autowired
	private IUserService userService;
	
	@Autowired
	private ICartService cartService;
	
	@Autowired
	private IBillService billService;
	
	@Autowired
	private IProductCartService productCartService;
	
	@Autowired
	private UserRepository userRepository;

	@Autowired
	private UserConverter userConverter;
	//ok
	@RequestMapping("/phan-hoi")
	public ModelAndView confirmation(@RequestParam("ship") String ship,
			HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("web/reply");
		Long userId = userService.findOneByUserNameAndStatus(SecurityUtils.getPrincipal().getUsername(), 
				SystemConstant.ACTIVE_STATUS).getId();
		Long cartId = cartService.getCartIdByUserId(userId);
		double shipping  = 0;
		if (ship.contains("standard")) {
			shipping = 0;
		} else if (ship.contains("express")) {
			shipping = 10;
		}
		else if (ship.contains("next_business")) {
			shipping = 20;
		}
		double subtotal = productCartService.subTotalPrice(cartId);
		double total = subtotal + SystemConstant.TAX +shipping;
		
		BillDTO bill  = new BillDTO(userId, total, subtotal, SystemConstant.TAX, shipping);
		BillDTO dto = billService.insert(bill);
		if(dto!=null) {
			productCartService.delete(cartId);
		}
		return mav;
	}
	
	@RequestMapping(value = "/dat-hang", method = RequestMethod.GET)
	public ModelAndView checkOutPage(HttpSession session) {
		ModelAndView mav = new ModelAndView("web/checkout");
		Long userId = userService.findOneByUserNameAndStatus(SecurityUtils.getPrincipal().getUsername(), 
				SystemConstant.ACTIVE_STATUS).getId();
		Long cartId = cartService.getCartIdByUserId(userId);
		UserEntity entity = userRepository.findOne(userId);
		UserDTO user = userConverter.toDto(entity);
		HashMap<Long, ProductCartDTO> cart = (HashMap<Long, ProductCartDTO>) session.getAttribute("Cart");
		if (cart == null) {
			cart = new HashMap<Long, ProductCartDTO>();
		}
		cart = productCartService.getCart(cartId);
		session.setAttribute("totalPriceCart", productCartService.subTotalPrice(cartId));
		session.setAttribute("Cart", cart);
		session.setAttribute("noPromotionPrice", productCartService.noPromotionPrice(cartId));
		mav.addObject("user", user);
		return mav;
	}
	
	@RequestMapping(value = "/hoa-don", method = RequestMethod.GET)
	public ModelAndView loginPage() {
		ModelAndView mav = new ModelAndView("web/invoice");
		return mav;
	}
	
	@RequestMapping(value = "/hoa-don", method = RequestMethod.GET)
	public ModelAndView showProduct(
			@PathVariable(value = "categoryCode", required = false) String categoryCode, @RequestParam("page") int page,
			HttpServletRequest request, @RequestParam("limit") int limit) {
		ModelAndView mav = new ModelAndView("web/shop");
		mav.addObject("categories", categoryService.findAll());
		ProductDTO model = new ProductDTO();
		model.setPage(page);
		model.setLimit(limit);
		Pageable pageable = new PageRequest(page - 1, limit);
		if (categoryCode.contains("danh-sach")) {
			model.setListResult(productService.findAll(pageable));
			model.setTotalItem(productService.getTotalItem());
		}
		else if (categoryCode.contains("hot-products")) {
			model.setListResult(productService.findAllByHotproduct(pageable, SystemConstant.HOT_PRODUCT));
			model.setTotalItem(productService.countByHotproduct(SystemConstant.HOT_PRODUCT));
		} else if (categoryCode.contains("new-products")) {
			model.setListResult(productService.findAllByNewproduct(pageable, SystemConstant.NEW_PRODUCT));
			model.setTotalItem(productService.countByNewproduct(SystemConstant.NEW_PRODUCT));
		} else {
			Long id = categoryService.findOneByCode(categoryCode).getId();
			model.setListResult(productService.findAllByCategory(pageable, id));
			model.setTotalItem(productService.countByCategory_id(id));
		}
		model.setTotalPage((int) Math.ceil((double) model.getTotalItem() / model.getLimit()));
		mav.addObject("products", model);
		return mav;
	}
}
